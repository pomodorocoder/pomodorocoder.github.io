#+TITLE: Pomodoro Coder

#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: ./
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

* Udacity

* Udemy

** Data Science for Python

*** Logistic Regression

**** Logistic Regression Theory
:PROPERTIES:
:EXPORT_FILE_NAME: logistic-regression-theory
:EXPORT_DATE: <2017-11-10 Fri>
:END:
     - Logistic Regression as a method for classification
     - Some examples of classification problems
       + Spam vs. Ham emails
       + Loan Default
       + Disease Diagnosis
     - Normal linear regression model won't fit well on binary groups
[[file:../public/images/data-science-python/linear-regression-binary-data.png]]


**** Logistic Regression with Python - Part 1

**** Logistic Regression with Python - Part 2

**** Logistic Regression with Python - Part 3

**** Logistic Regression Project Overview

**** Logistic Regression Project Solution
** Data Science for R
* DataCamp
* DataQuest                                  :@dataquest:
** Data Structure and Algorithms
   Learn how computers work and how they work with data
   *Objectives:*
   - Learn the basics of computer instructions
   - Explore how to use algorithms for searching datasets
   - Learn about recursiong, a powerful way of structuring code
*** Memory and unicode
    Learn about computer memory and Unicode by analyzing excerpts from CIA reports
    *Objectives:*
    - How computers store values in memory
    - The binary and hexadecimal systems
    - How strings are represented in Unicode
**** Intro
:PROPERTIES:
:EXPORT_FILE_NAME: memory-unicode-intro
:EXPORT_DATE: <2017-11-10 Fri>
:END:
     In this mission, we'll learn how computers store values in memory. 
     We will look at the CIA memos data.
     Here's a preview of the data
#+begin_src python
year,statement,,,
1997,"The FBI information included that al-Mairi's brother ""traveled to Afghanistan in 1997-1998 to train in Bin - Ladencamps.""",,,
1997,"The FBI information included that al-Mairi's brother ""traveled to Afghanistan in 1997-1998 to train in Bin - Ladencamps.""",,,
#+end_src

The file consists of one long string. To use it effectively, we'd need to parse it and convert it into rows and columns. Here's a brief overview of how a computer stores the data:
- Computers store files on hard drives
- A hard drive allows us to save data, turn the computer off, and then access the data again later
- The tech community commonly refers to hard drives as magnetic storage, because they store data on magnetic strips
- Magnetic strips can only contain a series of two values - up and down. Our entire CSV file saves to a hard drive the same way. We can't directly write strings such as the letter a to a hard disk; we need to convert them to a series of magnetic ups and downs first.
- We can do this with an encoding system called binary. With binary, the only valid numbers are 0 and 1. This constraint makes it easy to store binary values on a hard disk.

**** The Basics of Binary
:PROPERTIES:
:EXPORT_FILE_NAME: basics-of-binary
:EXPORT_DATE: <2017-11-10 Fri>
:END:
Computers can't store values like strings or integers directly. Instead, they store information in binary, where the only valid numbers are 0 and 1. This system makes storing data on devices like hard drives possible.
- Base 10: we normally count in "base 10." We call this system base 10 because there are 10 possible digits - 0 through 9
- Base 2: Binary is base two, because there are only two possible digits - 0 and 1

Let's explore how binary numbers work. Convert the binary number "100" to a base 10 integer, and assign the result to ~base_10_100~
- In python, we have to store binary numbers as strings.
- If we try to enter it directly as b = 10, Python will assume it's a base 10 integer
- we can convert b from a string to a binary number with the ~int~ function
  + We need to set the optional second argument, base, to 2 (binary is base two)

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
base_10_100 = int("100", 2)
base_10_100
#+END_SRC

#+RESULTS:
:RESULTS:
4
:END:

**** Binary Addition
:PROPERTIES:
:EXPORT_FILE_NAME: binary-addition
:EXPORT_DATE: <2017-11-10 Fri>
:END:
We can add binary numbers together, just like we can with base 10 numbers

In the example below:
- ~a~ is in base 10 -- because we have 10 possible digits, the highest value we can represent with one digit is 9
- When we want to represent ~a~ value one higher, we need to add another digit.
- ~a~ now has two digits -- we incremented the invisible leading digit, which was 0 and is now 1, and set the last digit back to zero.

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
a = 9
a += 1
a
#+END_SRC

#+RESULTS:
:RESULTS:
10
:END:

When we add 1 to 19, we increment the leading 1 by 1, and then set the last digit to 0, giving us 20.
#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
a = 19
a += 1
a
#+END_SRC

#+RESULTS:
:RESULTS:
20
:END:

When we add 1 to 99, we increment the last digit by 1, and add 1 to the first digit, but the first digit is now greater than 9, so we have to increment the invisible leading digit.
#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
a = 99
a += 1
a
#+END_SRC

#+RESULTS:
:RESULTS:
100
:END:

Binary addition works the exact same way, except the highest value any single digit can represent is 1
- We'll add binary values by defining a ~binary_add~ function that was made just for this exercise
- It's not extremely important to know how it works at the moment
#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
b = "1"
def binary_add(a, b):
    return bin(int(a, 2) + int(b, 2))[2:]

c = binary_add(b, "1")
c
#+END_SRC

#+RESULTS:
:RESULTS:
10
:END:

c now equals "11"
#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
c = binary_add(c, "1")
c
#+END_SRC

#+RESULTS:
:RESULTS:
11
:END:

c now equals "100"
#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
c = binary_add(c, "1")
c
#+END_SRC

#+RESULTS:
:RESULTS:
101
:END:

**** Converting Binary Values to Other Bases
:PROPERTIES:
:EXPORT_FILE_NAME: convert-binary
:EXPORT_DATE: <2017-11-10 Fri>
:EXPORT_HUGO_MENU:
:EXPORT_HUGO_CUSTOME_FRONT_MATTER:
:END:
Let's see which values in binary equal which values in base 10

#+BEGIN_SRC ipython :session :file  :exports both :results raw drawer
def binary_add(a, b):
    return bin(int(a, 2) + int(b, 2))[2:]

# Start both at 0
a = 0
b = "0"

# Loop 10 times
for i in range(0, 10):
    # Add 1 to each
    a += 1
    b = binary_add(b, "1")

# Check if they are equal
print(int(b, 2) == a)
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

* Pluralsight

* Front End Master

* Youtube

** Brandon Rhodes Pands
* Lynda
